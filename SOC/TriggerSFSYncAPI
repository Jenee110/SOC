public class TriggerSFSyncAPI implements Queueable, Database.AllowsCallouts{
    public String objectName;
    public List<String> dataList;
    public String action;
    public List<SObject> updateRecordList;
    public Map<String, Object> formulaFieldsDataMaps;
    
    public TriggerSFSyncAPI(String objectName, List<String> dataList, String action, List<SObject> updateRecordList){
        system.debug('objectName: '+objectName);
        system.debug('DataList: '+dataList);
        
        system.debug('action: '+action);
        //To manage multiple future calls   
        this.objectName = objectName;
        this.dataList = dataList;
        this.action = action;
        this.updateRecordList = updateRecordList; 
    }
    
    //Auto Execute On Class Call
    public void execute(QueueableContext context) {
        //system.debug('objectName: '+objectName);
        //system.debug('action: '+action);
        system.debug('dataList: '+dataList);
        //system.debug('dataList: '+dataList.size());
        //system.debug('dataListAfterSerialization: '+JSON.serialize(dataList));
        //system.debug('updateRecordList: '+updateRecordList);
        //system.debug('updateRecordList: '+updateRecordList.size());
        
        if(action == 'actionInsert'){
            
            List<SObject> sObjectList = new List<SObject>();
            for (String data : dataList) {
                SObject sObj = (SObject)JSON.deserialize(data, Type.forName(objectName));
                sObjectList.add(sObj);
            }
            
            List<String> insert_data = new List<String>();
            for(SObject data : sObjectList){
                insert_data.add((String) data.get('Id'));
            }
            
            
            List<String> fieldNames = new List<String>(); 
            for(Schema.SObjectField field: Schema.getGlobalDescribe().get(objectName).getDescribe().fields.getMap().values())
            { 
                fieldNames.add(field.getDescribe().getName());
            }
            
            system.debug('fieldNames: '+fieldNames); 
            String query = 'SELECT ' + String.join(fieldNames, ',') + ' FROM ' + objectName + ' WHERE Id IN :insert_data'; 
            system.debug('Query: '+query); 
            
            List<SObject> recordRes = database.query(query);
            system.debug('recordRes::::'+recordRes);
            
            List<sObject> getAllRecords = new List<sObject>();
            
            for (sObject objRec : recordRes) {            
                // Check for missing fields
                Map<String, Object> missingFieldValues = new Map<String, Object>();
                for (String fieldName : fieldNames) {
                    if (!objRec.getPopulatedFieldsAsMap().containsKey(fieldName)) {
                        missingFieldValues.put(fieldName, null);
                        missingFieldValues.remove('LastActivityDate'); // Remove the system generated fields
                        missingFieldValues.remove('UserRecordAccessId');
                        missingFieldValues.remove('ConnectionReceivedId');
                        missingFieldValues.remove('ConnectionSentId');
                        //system.debug('After remove: '+missingFieldValues);  
                    }
                }
                
                // Add missing fields to the MobileApp record list
                for (String fieldName : missingFieldValues.keySet()) {
                    Schema.DescribeFieldResult fieldDesc = objRec.getSobjectType().getDescribe().fields.getMap().get(fieldName).getDescribe();
                    
                    //Check for only updatable field which are not generated by system
                    if (fieldDesc.isUpdateable()) {
                        objRec.put(fieldName, missingFieldValues.get(fieldName));                    
                        //system.debug('missing fields--'+fieldName);
                        //system.debug('fields value--'+missingFieldValues.get(fieldName));
                    }
                }
                getAllRecords.add(objRec);
            }
            
            system.debug('inside if getAllRecords: '+getAllRecords);
            system.debug('getAllRecords size: '+getAllRecords.size());
            system.debug('Inside insert getAllRecords:'+ getAllRecords);
            system.debug('getAllRecords size:'+ getAllRecords.size());
            Http http = new Http(); 
            HttpRequest req = new HttpRequest(); 
            req.setTimeout(60000);
            req.setMethod('POST');
            req.setBody(JSON.serialize(getAllRecords)); 
            req.setEndpoint('https://ny67869sad.execute-api.us-east-2.amazonaws.com/production/saveRecords?objectName=' + objectName +'&isBulkData=true'); 
            req.setHeader('content-type', 'application/json;charset=UTF-8'); 
            req.setHeader('Authorization', 'r?ftDEZ_qdt=VjD#W@S2LM8FZT97Nx'); 
            HTTPResponse res = http.send(req); 
            if (res.getStatusCode() != 200) 
            { 
                System.debug('The status code returned was not expected: ' + res.getStatusCode() + ' ' + res.getStatus()); 
            } 
            else { 
                System.debug('last response'); 
                System.debug(res.getBody()); 
            }
        }
        //Execute on updating the records--------------------
        else if(action == 'actionUpdate'){
            
            List<String> str = new List<String>();
            for(SObject data : updateRecordList){
                str.add((String) data.get('Id'));
            }
            //system.debug('dataId: '+str);
            
            List<String> fieldNames = new List<String>(); 
            for(Schema.SObjectField field: Schema.getGlobalDescribe().get(objectName).getDescribe().fields.getMap().values())
            { 
                fieldNames.add(field.getDescribe().getName());
            }
            
            //system.debug('fieldNames: '+fieldNames); 
            String query = 'SELECT ' + String.join(fieldNames, ',') + ' FROM ' + objectName + ' WHERE Id IN :str'; 
            //system.debug('Query: '+query); 
            
            List<SObject> recordRes = database.query(query);
            //system.debug('recordRes::::'+recordRes);
            
            List<sObject> getAllRecords = new List<sObject>();
            
            List<Map<String, Object>> formulafieldVlauesList = new List<Map<String, Object>>(); // Use List<Map<String, Object>> to store dataMap values
                       
            for (sObject objRec : recordRes) {            
                // Check for missing fields
                System.debug('objRec' + objRec);
                Map<String, Object> missingFieldValues = new Map<String, Object>();
                formulaFieldsDataMaps = new Map<String, Object>();
                for (String fieldName : fieldNames) {
                    if (!objRec.getPopulatedFieldsAsMap().containsKey(fieldName)) {
                        missingFieldValues.put(fieldName, null);
                        missingFieldValues.remove('LastActivityDate'); // Remove the system generated fields
                        missingFieldValues.remove('UserRecordAccessId');
                        missingFieldValues.remove('ConnectionReceivedId');
                        missingFieldValues.remove('ConnectionSentId');
                        //system.debug('After remove: '+missingFieldValues);  
                    }
                }
                
                // Add missing fields to the MobileApps record list
                for (String fieldName : missingFieldValues.keySet()) {
                    Schema.DescribeFieldResult fieldDesc = objRec.getSobjectType().getDescribe().fields.getMap().get(fieldName).getDescribe();
                    //System.debug('fieldDesc' + fieldDesc.getName());
                    //Check for only updatable field which are not generated by system
                    if (fieldDesc.isUpdateable()) {
                        objRec.put(fieldName, missingFieldValues.get(fieldName));                    
                    }
                    //Check and list formula fields having null values to make them sync to postgress
                    else if(fieldDesc.isCalculated() && missingFieldValues.get(fieldName) == null){                            
                        //Adding formual field with null value in a object //will add {} in case no null formual field exist at the list index
                            formulaFieldsDataMaps.put(fieldName, null);                             
                    }                   
                } 
                //updating the object to a list
                System.debug('dataMaps'+ formulaFieldsDataMaps);
                //adding formula field to each records if missing
                formulafieldVlauesList.add(formulaFieldsDataMaps);
                getAllRecords.add(objRec); 
            }

            System.debug('formulafieldVlaues:' + formulafieldVlauesList);              
            // Serialize getAllRecords into JSON
            String serializedRecords = JSON.serialize(getAllRecords);
            
            // Deserialize the JSON into a list of objects
            List<Object> recordList = (List<Object>) JSON.deserializeUntyped(serializedRecords);
			System.debug('formulafieldVlauessize' + formulafieldVlauesList.size());            
                        
            //recordList = mail list having all fields other than null formula fields
            for (Integer i = 0; i < recordList.size(); i++) {
                Map<String, Object> recordMap = (Map<String, Object>) recordList.get(i);
                // Ensure there are formula field values for this record
                if (i < formulafieldVlauesList.size()) {
                    Map<String, Object> dataMap = formulafieldVlauesList.get(i);
                    //Adding each key of dataMap in the main list object index
                    for (String fieldName : dataMap.keySet()) {
                        // Check if the recordMap contains the same field name                        
                        recordMap.put(fieldName, dataMap.get(fieldName));
                    }
                }
            }
            
            
            // Serialize the modified list of objects back into JSON
            String updatedSerializedRecords = JSON.serialize(recordList);
            //System.debug('updatedSerializedRecords: *************' + updatedSerializedRecords);
            
            // Deserialize the JSON back into a list of sObjects
            List<sObject> updatedRecords = (List<sObject>) JSON.deserialize(updatedSerializedRecords, List<sObject>.class);
            System.debug('updatedRecords' + updatedRecords);
            
            Http http = new Http(); 
            HttpRequest req = new HttpRequest(); 
            req.setTimeout(60000);
            req.setMethod('POST');
            req.setBody(JSON.serialize(updatedRecords)); 
            req.setEndpoint('https://ny67869sad.execute-api.us-east-2.amazonaws.com/production/saveRecords?objectName=' + objectName+'&isBulkData=true'); 
			
            req.setHeader('content-type', 'application/json;charset=UTF-8'); 
            req.setHeader('Authorization', 'r?ftDEZ_qdt=VjD#W@S2LM8FZT97Nx'); 
            HTTPResponse res = http.send(req); 
            if (res.getStatusCode() != 200) 
            { 
                System.debug('The status code returned was not expected: ' + res.getStatusCode() + ' ' + res.getStatus()); 
            } 
            else { 
                System.debug('last response'); 
                System.debug(res.getBody()); 
            }
        }
        else if(action == 'actionDelete'){
            //system.debug('Inside delete');
            //system.debug('dataList:'+dataList);
            
            Http http = new Http();
            HttpRequest req = new HttpRequest();
            req.setTimeout(60000);
            req.setEndpoint('https://ny67869sad.execute-api.us-east-2.amazonaws.com/production/deleteRecord?objectName=' + objectName + '&id=' + dataList[0]);
            req.setMethod('DELETE');
            req.setHeader('Content-Type', 'application/json;charset=UTF-8');
            req.setHeader('Authorization', 'r?ftDEZ_qdt=VjD#W@S2LM8FZT97Nx');
            HTTPResponse res = http.send(req);
            
            if (res.getStatusCode() != 200) {
                System.debug('The status code returned was not expected: ' + res.getStatusCode() + ' ' + res.getStatus());     
            } else {
                System.debug('last response');
                System.debug(res.getBody());
            }
        }
    }
}
